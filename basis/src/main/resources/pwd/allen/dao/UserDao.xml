<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pwd.allen.dao.UserDao">

    <!-- 设置UserDao的二级缓存
    eviction：缓存的回收策略， 默认的是 LRU。
    flushInterval ：刷新间隔，单位毫秒，默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新。
     size ：引用数目，正整数，代表缓存最多可以存储多少个对象，太大容易导致内存溢出
     readOnly ：只读，true/false，设为false时会返回缓存对象的拷贝（通过序列化）。这会慢一些，但是安全，因此默认是 false。
     -->
    <cache/>

    <select id="getById" resultType="pwd.allen.entity.User">
    select id, user_name, status, create_at, age, dept_id from db_user where id = #{id}
    </select>
    <select id="getById" resultType="pwd.allen.entity.User" databaseId="oracle">
    select id, name USERNAME, createdate createAt, age, did dept_id,status from pwd_user where id = #{id}
    </select>

    <select id="getByList" resultType="pwd.allen.entity.User">
    select * from db_user where id = #{param[0]} and user_name=#{param1[1]}
    </select>

    <select id="getByIdReturnMap" resultType="map">
    select * from db_user where id = #{id}
    </select>

    <select id="getsByUserNameLike" resultType="pwd.allen.entity.User">
    select * from db_user where user_name like #{userName}
    </select>

    <select id="getsByAgeLtReturnMap" resultType="pwd.allen.entity.User">
    select * from db_user where age &lt;= #{age}
    </select>

    <!-- 联合查询
    方式1 property写级联属性如dept.id
    方式2 用<association>
     -->
    <resultMap id="MyMap" type="pwd.allen.entity.User">
        <id column="id" property="id"/>
        <result column="create_at" property="createAt"/>
        <result column="user_name" property="userName"/>
        <!--<result column="did" property="dept.id"/>-->
        <!--<result column="dept_name" property="dept.deptName"/>-->
        <association property="dept" javaType="pwd.allen.entity.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>
    <select id="getUserAndDept" resultMap="MyMap">
    select du.*, dd.id did, dd.dept_name dept_name
    from db_user du left join db_dept dd on dd.id=du.dept_id where du.id=#{id}
    </select>

    <!-- association 分布查询 -->
    <resultMap id="MyMapStep" type="pwd.allen.entity.User">
        <id column="id" property="id"/>
        <result column="create_at" property="createAt"/>
        <result column="user_name" property="userName"/>
        <association property="dept" select="pwd.allen.dao.DepartmentDao.getById" column="did">
        </association>
    </resultMap>
    <select id="getStep" resultMap="MyMapStep">
    select * from db_user where id=#{id}
    </select>

    <select id="getUsersByDeptId" resultType="pwd.allen.entity.User">
        select * from db_user where dept_id=#{deptId}
    </select>
    <select id="getUsers" resultType="pwd.allen.entity.User">
        select * from db_user where 1=1
         <if test="deptId != null and deptId!=''">
             and dept_id = #{deptId}
         </if>
         <if test="col != null and col != ''">
             and #{col} = #{col}
         </if>
    </select>

    <sql id="mySql">
        and ${key} = ${value}
    </sql>

    <select id="getByIdAndUserName" resultType="pwd.allen.entity.User">
    select * from db_user where id = #{id} and user_name = #{userName}
        <include refid="mySql">
            <property name="key" value="1"/>
            <property name="value" value="1"/>
        </include>
    </select>

    <select id="selectByMap" resultType="pwd.allen.entity.User">
        <if test="map.type == 1">
            <bind name="newName" value="'type=1'"/>
        </if>
        <if test="map.type != 1">
            <bind name="newName" value="'type!=1'"/>
        </if>
    select id,#{newName} user_name, age, status, create_at from db_user where id = #{map.id} and user_name=#{param1.userName}
    </select>

    <!-- selectKey设置从序号获取自增ID -->
    <insert id="insertUser">
        <!--<selectKey keyColumn="id" keyProperty="id" order="BEFORE">
            select user_seq.next()
        </selectKey>-->
    insert into db_user(id, user_name, age, status, dept_id)
    values(#{id}, #{userName}, #{age}, #{status}, #{dept.id})
    </insert>

    <!-- useGeneratedKeys="true"用于mysql这种主键自增的情况 -->
    <insert id="addUser" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into db_user(user_name, age, status, dept_id)
        values(#{userName}, #{age}, #{status}, #{dept.id})
    </insert>

    <!--
        Oracle不支持自增；可以使用序列来模拟自增
    -->
    <insert id="addUser" databaseId="oracle">
        <!-- 在插入之前查询主键值并赋给id -->
        <selectKey keyProperty="id" order="BEFORE" resultType="int">
            select USER_SEQ.nextval from dual
        </selectKey>
        insert into pwd_user(id, name, age, status, createdate, did)
        values(#{id}, #{userName,jdbcType=NULL}, #{age}, #{status},#{createAt}, #{dept.id})
    </insert>

</mapper>